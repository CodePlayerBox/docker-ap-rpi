#!/bin/bash

#title           :docker_ap
#description     : This script is mainly copied from
#                 https://github.com/fgg89/docker-ap/blob/master/docker_ap
#                 and striped to support raspberry pi only for CodePlayerBox.
#
#                 This script will configure a Debian-based system
#                 for running a wireless access point inside a
#                 docker container.
#                 The docker container has unique access to the
#                 physical wireless interface.
#author          :Wenpeng Xiao <xiaowp@flamingoeda.com>
#date            :20190120
#version         :0.1
#usage           :bash docker_ap <start|stop> [interface]
#bash_version    :4.4.12(1)-release (arm-unknown-linux-gnueabihf)
#dependencies	   :docker, iw, pgrep, grep, iptables, cat, ip,
#                 bridge-utils, rfkill, wpa_cli
#=============================================================

#YELLOW='\e[0;33m'
#BLACK='\e[0;30m'
#CYAN='\e[0;36m'
#WHITE='\e[0;37m'
MAGENTA='\e[0;35m'
RED='\e[0;31m'
GREEN='\e[0;32m'
BLUE='\e[0;34m'
NC='\e[0m'
ROOT_UID="0"
ARCH=$(arch)
DOCKER_NAME="ap-rpi"
DOCKER_IMAGE="ap-rpi"
CONF_FILE="ap.conf"
#PATHSCRIPT=$(pwd)
pushd "$(dirname "$0")" > /dev/null
PATHSCRIPT=$(pwd)
popd > /dev/null

if [ "$ARCH" != "armv7l" ]
then
    echo "We only support raspberry pi running on armv7. Exiting..."
    exit 1
fi

show_usage () {
    echo -e "Usage: $0 <start|stop> [interface]"
    exit 1
}

if [ "$1" == "help" ] || [ "$#" -eq 0 ]
then
    show_usage
fi

# Check run as root
if [ "$UID" -ne "$ROOT_UID" ] ; then
    echo "You must be root to run this script!"
    exit 1
fi

# Argument check
if [ "$#" -eq 0 ] || [ "$#" -gt 2 ]
then
    show_usage
fi

print_banner () {
    echo -e "${MAGENTA}"'  ____          _      ____  _                       ____            ' "${NC}"
    echo -e "${MAGENTA}"' / ___|___   __| | ___|  _ \| | __ _ _   _  ___ _ __| __ )  _____  __' "${NC}"
    echo -e "${MAGENTA}"'| |   / _ \ / _` |/ _ \ |_) | |/ _` | | | |/ _ \ '"'"'__|  _ \ / _ \ \/ /' "${NC}"
    echo -e "${MAGENTA}"'| |__| (_) | (_| |  __/  __/| | (_| | |_| |  __/ |  | |_) | (_) >  < ' "${NC}"
    echo -e "${MAGENTA}"' \____\___/ \__,_|\___|_|   |_|\__,_|\__, |\___|_|  |____/ \___/_/\_\' "${NC}"
    echo -e "${MAGENTA}"'                                     |___/                           ' "${NC}"
    echo ""
}


init () {
    IFACE="$1"

    # Check that the requested iface is available
    if ! [ -e /sys/class/net/"$IFACE" ]
    then
        echo -e "${RED}[ERROR]${NC} The interface provided does not exist. Exiting..."
        exit 1
    fi

    # Check that the given interface is not used by the host as the default route
    if [[ $(ip r | grep default | cut -d " " -f5) == "$IFACE" ]]
    then
        echo -e "${BLUE}[INFO]${NC} The selected interface is configured as the default route, if you use it you will lose internet connectivity"
        while true;
        do
            read -p "Do you wish to continue? [y/n]" yn
            case $yn in
                [Yy]* ) break;;
                [Nn]* ) exit;;
                * ) echo "Please answer yes or no.";;
            esac
        done
	  fi

    # Find the physical interface for the given wireless interface
    PHY=$(cat /sys/class/net/"$IFACE"/phy80211/name)

    # Architecture
    echo -e "${BLUE}[INFO]${NC} Architecture: ${GREEN}$ARCH${NC}"

    # Number of phy interfaces
    NUM_PHYS=$(iw dev | grep -c phy)
    echo -e "${BLUE}[INFO]${NC} Number of physical wireless interfaces connected: ${GREEN}$NUM_PHYS${NC}"

    # Checking if the docker image has been already pulled
    IMG_CHECK=$(docker images -q $DOCKER_IMAGE)
    if [ "$IMG_CHECK" != "" ]
    then
        echo -e "${BLUE}[INFO]${NC} Docker image ${GREEN}$DOCKER_IMAGE${NC} found."
    else
        echo -e "${BLUE}[INFO]${NC} Docker image ${RED}$DOCKER_IMAGE${NC} not found. Exiting..."
        exit 1
    fi

    ### Check if hostapd is running in the host
    hostapd_pid=$(pgrep hostapd)
    if [ ! "$hostapd_pid" == "" ]
    then
       echo -e "${BLUE}[INFO]${NC} hostapd service is already running in the system, make sure you use a different wireless interface..."
       #kill -9 "$hostapd_pid"
    fi

    # Unblock wifi and bring the wireless interface up
    echo -e "${BLUE}[INFO]${NC} Unblocking wifi and setting ${IFACE} up"
    rfkill unblock wifi
    ip link set "$IFACE" up

    # Disconnect from existing AP if necessary
    if [[ $(wpa_cli -i ${IFACE} status | grep wpa_state | cut -d= -f2) = "COMPLETED" ]]; then
        echo -e "${RED}[INFO]${NC} Disconnecting ${IFACE} from connected AP"
        wpa_cli -i ${IFACE} disconnect
    fi

    # Check if a config file exists
    if [ -e "$PATHSCRIPT"/"$CONF_FILE" ]
    then
        echo -e "${BLUE}[INFO]${NC} Found config file"
	      # Load the config file
        source "$PATHSCRIPT"/"$CONF_FILE"
    else
        echo -e "${BLUE}[INFO]${NC} WLAN config file not found. Exiting..."
        exit 1
    fi

    ### Generating hostapd.conf file
    echo -e "[+] Generating hostapd.conf"
    sed -e "s/_SSID/$SSID/g" -e "s/_IFACE/$IFACE/" -e "s/_HW_MODE/$HW_MODE/g" -e "s/_CHANNEL/$CHANNEL/g" -e "s/_PASSPHRASE/$PASSPHRASE/g" -e "s/_WPA_MODE/$WPA_MODE/g" "$PATHSCRIPT"/templates/hostapd.template > "$PATHSCRIPT"/hostapd.conf

    ### Generating dnsmasq.conf file
    echo -e "[+] Generating dnsmasq.conf"
    sed -e "s/_DNS_SERVER/$DNS_SERVER/g" -e "s/_IFACE/$IFACE/" -e "s/_SUBNET_FIRST/$SUBNET.20/g" -e "s/_SUBNET_END/$SUBNET.254/g" "$PATHSCRIPT"/templates/dnsmasq.template > "$PATHSCRIPT"/dnsmasq.conf

    ### Generating dnsmasq.hosts file
    echo -e "[+] Generating dnsmasq.hosts"
    sed -e "s/_IP_AP/$IP_AP/g" "$PATHSCRIPT"/templates/hosts.template > "$PATHSCRIPT"/dnsmasq.hosts

}

service_start () {
    IFACE="$1"
    echo -e "[+] Starting the docker container with name ${GREEN}$DOCKER_NAME${NC}"
    docker run -dt --name $DOCKER_NAME --net=host --cap-add=NET_ADMIN --cap-add=NET_RAW -v /dev/urandom:/dev/random -v "$PATHSCRIPT"/hostapd.conf:/etc/hostapd/hostapd.conf -v "$PATHSCRIPT"/dnsmasq.conf:/etc/dnsmasq.conf -v "$PATHSCRIPT"/dnsmasq.hosts:/etc/dnsmasq.hosts $DOCKER_IMAGE > /dev/null 2>&1
    pid=$(docker inspect -f '{{.State.Pid}}' $DOCKER_NAME)

    # Assign phy wireless interface to the container
    mkdir -p /var/run/netns
    ln -s /proc/"$pid"/ns/net /var/run/netns/"$pid"
    iw phy "$PHY" set netns "$pid"

    ### Assign an IP to the wifi interface
    echo -e "[+] Configuring ${GREEN}$IFACE${NC} with IP address ${GREEN}$IP_AP${NC}"
    ip netns exec "$pid" ip addr flush dev "$IFACE"
    ip netns exec "$pid" ip link set "$IFACE" up
    ip netns exec "$pid" ip addr add "$IP_AP$NETMASK" dev "$IFACE"

    ### iptables rules for NAT
    echo "[+] Adding natting rule to iptables (container)"
    ip netns exec "$pid" iptables -t nat -A POSTROUTING -s $SUBNET.0$NETMASK ! -d $SUBNET.0$NETMASK -j MASQUERADE

    ### Enable IP forwarding
    echo "[+] Enabling IP forwarding (container)"
    ip netns exec "$pid" echo 1 > /proc/sys/net/ipv4/ip_forward
    ### start hostapd and dnsmasq in the container
    echo -e "[+] Starting ${GREEN}hostapd${NC} and ${GREEN}dnsmasq${NC} in the docker container ${GREEN}$DOCKER_NAME${NC}"
    docker exec "$DOCKER_NAME" start_ap
}

service_stop () {
    IFACE="$1"
    echo -e "[-] Stopping ${GREEN}$DOCKER_NAME${NC}"
    docker stop $DOCKER_NAME > /dev/null 2>&1
    echo -e "[-] Removing ${GREEN}$DOCKER_NAME${NC}"
    docker rm $DOCKER_NAME > /dev/null 2>&1
    echo [-] Removing conf files
    if [ -e "$PATHSCRIPT"/hostapd.conf ]
    then
        rm "$PATHSCRIPT"/hostapd.conf
    fi
    if [ -e "$PATHSCRIPT"/dnsmasq.conf ]
    then
        rm "$PATHSCRIPT"/dnsmasq.conf
    fi
    echo [-] Removing IP address in "$IFACE"
    ip addr del "$IP_AP$NETMASK" dev "$IFACE" > /dev/null 2>&1
    # Clean up dangling symlinks in /var/run/netns
    find -L /var/run/netns -type l -delete
}

if [ "$1" == "start" ]
then
    if [[ -z "$2" ]]
    then
        echo -e "${RED}[ERROR]${NC} No interface provided. Exiting..."
        exit 1
    fi
    IFACE=${2}
    service_stop "$IFACE"
    clear
    print_banner
    init "$IFACE"
    service_start "$IFACE"
elif [ "$1" == "stop" ]
then
    if [[ -z "$2" ]]
    then
        echo -e "${RED}[ERROR]${NC} No interface provided. Exiting..."
        exit 1
    fi
    IFACE=${2}
    service_stop "$IFACE"
else
    echo "Usage: $0 <start|stop> <interface>"
fi
